/*
 * Minesweeper license
 * 
 * Copyright © 2016 Johan Lipecki & Viggo Lundén
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
package minesweeper.Controller;

import java.util.Arrays;
import java.util.Observable;
import java.util.Observer;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.control.Button;
import javafx.scene.effect.DropShadow;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.shape.Polygon;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Shape;
import javafx.scene.shape.StrokeLineCap;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.Text;
import minesweeper.Model.GameTimer;
import minesweeper.Model.Minesweeper;

/**
 * An observable Game button. Used for pausing, playing, etc.
 * @author Johan Lipecki <lipecki@kth.se>
 */
public class GameButton implements Observer{
    
    private final Button button;
    private DropShadow shadow;
    private double shadowOffset;
    private double sideLength;
    private Text text;
    public final ButtonEnum type;

    /**
     * Creates a new GameButton
     * @param diameter The diameter of the game button
     * @param type The type of game button
     */
    public GameButton(double diameter, ButtonEnum type) {
        button = new Button();
        shadow = new DropShadow();
        shadowOffset = diameter / 22;
        sideLength = Math.sqrt(Math.pow(diameter, 2)*2);
        
        //shadow.setOffsetX(shadowOffset);
        shadow.setOffsetY(shadowOffset);
        shadow.setColor(Color.GREY);
        
        
        button.setShape(new Circle(diameter));
        
        button.setMinSize(sideLength, sideLength);
        button.setMaxSize(sideLength, Double.MAX_VALUE);
        button.setAlignment(Pos.CENTER);
        
        double hypotenuse = Math.sqrt(Math.pow(diameter, 2.0)*2);
        double x1 = (hypotenuse - diameter)/Math.PI;
        double y1 = (hypotenuse - diameter)/(Math.PI*Math.E);
        this.type = type;
        
        switch(type){
            case PLAY:
                Polygon triangle = new Polygon();
                triangle.getPoints().addAll(new Double[]{x1, y1,diameter,diameter/2,x1,diameter-y1});
                triangle.setFill(Color.GREEN);
                triangle.setEffect(shadow);
                button.setGraphic(triangle);
                break;
            case PAUSE:
                Group root = new Group();
                Line  line1, line2;
                double strokeWidth = diameter / 5;//Math.pow(Math.PI,Math.E);
                double x2 = Math.PI*diameter/3;
                
                line1 = new Line(diameter/2,0.0,diameter/2,diameter/2);
                line2 = new Line(x2,0.0,x2,diameter/2);
                
                root.getChildren().addAll(line1, line2);
                System.out.println("Lines: " + Arrays.toString(root.getChildren().toArray()));
                for(Object l: root.getChildren().toArray()) {
                    Line line = (Line) l;
                    line.setStroke(Color.BLUE);
                    line.setStrokeLineCap(StrokeLineCap.ROUND);
                    line.setStrokeWidth(strokeWidth);
                    line.setEffect(shadow);
                    l = line;
                }
                button.setGraphic(root);
                break;
            case HELP:
                Font myFont = new Font("Garamond",diameter);
                
                text = new Text("?");
                text.setEffect(shadow);
                text.setFont(myFont);
                
                button.setGraphic(text);
                break;
            default: 
                myFont = new Font("Garamond",14);
                
                text = new Text("Time");
                text.setEffect(shadow);
                text.setFont(myFont);
                
                button.setShape(new Rectangle(10.0,20.0));
                button.setGraphic(text);
                break;
                     
        }
            
    }
    
    /**
     * 
     * @return The inner button of the Game button 
     */
    public Button getButton(){
        return button;
    }

    @Override
    public void update(Observable o, Object arg) {
        if(o instanceof Minesweeper){
            Minesweeper model = (Minesweeper) o;
            this.text = new Text(Integer.toString(model.getTime()));
        }
        else if (o instanceof GameTimer){
            GameTimer model = (GameTimer) o;
            this.text = new Text(Integer.toString(model.getSeconds()));
        }
    }
    
    
    public enum ButtonEnum {
        PLAY,PAUSE,HELP,TIME;
    }
    
}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template menu1, choose Tools | Templates
 * and open the template in the editor.
 */
package minesweeper.Controller;


import javafx.application.Platform;
import javafx.event.Event;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.layout.VBox;
import minesweeper.Model.Minesweeper;
import minesweeper.View.ClockView;
import minesweeper.View.GameView;
import minesweeper.View.RulesView;

/**
 * The Game controllers
 * @author Viggo
 */
public class GameControllers extends VBox {
    private final Minesweeper game;
    private final Button rulesButton, resumeButton, pauseButton;
    private final Insets inset;
    private final Button timeButton;
    private final GameView gameView;
    
    /**
     * Creates a new class containing the Game controllers
     * @param game The game to handle
     * @param gameView The view to handle
     */
    public GameControllers(Minesweeper game, GameView gameView)
    {
        this.game = game;
        this.gameView = gameView;
        double buttonWidth = 20;

        pauseButton = new GameButton(buttonWidth, GameButton.ButtonEnum.PAUSE).getButton();
        rulesButton = new GameButton(buttonWidth, GameButton.ButtonEnum.HELP).getButton();
        resumeButton = new GameButton(buttonWidth, GameButton.ButtonEnum.PLAY).getButton();
        timeButton = new GameButton(buttonWidth, GameButton.ButtonEnum.TIME).getButton();
 
        inset = new Insets(5);
        this.setPadding(inset);
        this.setSpacing(10);
        this.setAlignment(Pos.BASELINE_CENTER);
         
        resumeButton.setOnMouseClicked(this::ResumeButtonClicked);
        pauseButton.setOnMouseClicked(this::PauseButtonClicked);
        rulesButton.setOnMouseClicked(this::RulesButtonClicked);
        timeButton.setOnMouseClicked(this::TimePaneClicked);
        
        this.getChildren().addAll(pauseButton,rulesButton,timeButton);
    }
    
    
    /**
     * Called whenever the user pressed the resume button
     * @param event 
     */
    public void ResumeButtonClicked(Event event)
    {
        this.getChildren().set(0, pauseButton);
        if(!game.isGameOver()) {
            game.resume();
        }
        else new NewGame(gameView.gameStage,game.getDifficultySetting());
    }
    /**
     * Called whenever the user pressed the pause button
     * @param event 
     */
    public void PauseButtonClicked(Event event)
    {
        this.getChildren().set(0, resumeButton);
        game.pause();
        
    }
    /**
     * Called whenever the user pressed the rules button
     * @param event 
     */
    public void RulesButtonClicked(Event event)
    {
        Platform.runLater(new RulesView());
    }
    /**
     * Called whenever the user clicks the Time button
     * @param event 
     */
    public void TimePaneClicked(Event event){
        gameView.getClockView().showClock();
    }
}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template menu1, choose Tools | Templates
 * and open the template in the editor.
 */
package minesweeper.Controller;

import java.util.Arrays;
import java.util.List;
import minesweeper.Model.TileEventException;
import java.util.Observable;
import java.util.Observer;
import javafx.event.Event;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.effect.DropShadow;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.Color;
import minesweeper.Model.Minesweeper;
import minesweeper.Model.Tile;
import minesweeper.Model.TileType;
import javafx.collections.ObservableList;
import javafx.scene.Group;
import javafx.scene.Node;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;

/**
 * The grid controller for the game view
 * @author Viggo
 */
public class GridController extends GridPane implements Observer {

    private Minesweeper game;
    private boolean timerStarted;
    private Insets inset;
    public static ImageView imageViewButton;
    private double buttonWidth;
    private double gridTileSize;
    private static int explosionCount, flagCount;
    private boolean stopExplosion;

    /**
     * Creates a new grid controller
     * @param game the game to handle
     * @throws IllegalArgumentException 
     */
    public GridController(Minesweeper game) throws IllegalArgumentException {

        this.game = game;
        timerStarted = false;
        buttonWidth = 20;
        gridTileSize = buttonWidth * 1.75;
        explosionCount = flagCount = 0;

        int ID;
        inset = new Insets(20);

        this.setAlignment(Pos.CENTER_LEFT);
        this.setGridLinesVisible(true);
        this.setPadding(inset);

        //get image for buttons
        Image image = new Image("water.png", buttonWidth, buttonWidth, false, true);
        DropShadow shadow = new DropShadow(2.0, Color.WHITE);

        //map tiles to a grid and set grid x and y for button 
        //using Tile Point X and Y
        this.getChildren().clear();
        for (Tile t : game.getBoardTiles()) {
            ID = game.getBoardTiles().indexOf(t);

            image.isSmooth();
            imageViewButton = new ImageView(image);
            imageViewButton.setEffect(shadow);
            imageViewButton.setFitHeight(gridTileSize);
            imageViewButton.setFitWidth(gridTileSize);
            imageViewButton.setOnMouseClicked(this::TileClicked);
            this.add(imageViewButton, t.getX(), t.getY());
            System.out.println("Tile ID: " + ID + t.getPoint().toString());

            //since the button handlers alter the tiles, 
            //action events trigger observers
            t.addObserver(this);
            this.update(t, null);

        }

    }
    
    /**
     * Called whenever a tile on the grid is clicked
     * @param event
     * @throws TileEventException 
     */
    public void TileClicked(MouseEvent event) throws TileEventException {

        if (timerStarted == false) {
            game.startTime();
            timerStarted = true;
        }
        Object o = event.getSource();
        Button b;
        ImageView im;
        int i;
        if (o instanceof Button) {
            b = (Button) event.getSource();
            i = this.getChildren().indexOf(b);;
        } else if (o instanceof ImageView) {
            
            im = (ImageView) o;
            System.out.println(event.getEventType().toString());
            ObservableList<Node> l = this.getChildren();
            i = this.getChildren().indexOf(im);
        } else {
            i = -1;
        }
        try {
            
            Tile t = game.getBoardTiles().get(i);
            
            if (event.getButton() == MouseButton.SECONDARY || event.isControlDown()) {
                t.setFlagged(!t.isFlagged());
                return;
            }
            else if (!t.isFlagged()) {
                game.board.uncover(t);
                if (game.board.bombCount(t) > 0) t.setNumber(game.board.bombCount(t));
            }
            
            System.out.println("Tile number: " + i);

            TileType type = t.getType();
            switch (type) {
                case BOMB:
                    
                    if (!t.isFlagged()) this.game.setGameOver();
                    System.out.println("BOMB!!!!!!");
                    
                    break;
                default:
                    break;
            }

        } catch (IndexOutOfBoundsException index) {
            for (String s : Arrays.toString(index.getStackTrace()).split(",")) {
                System.err.print(s);
            }
            throw new TileEventException("Event source not supported");
        }
    }

    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof Tile) {

            synchronized (o) {
                //System.out.println(((Tile) o).getX());
                Tile tile = (Tile) o;
                Object iv = this.getChildren().get(game.getBoardTiles().indexOf(tile));
                
                //ignore updates by the Group Node of a list
                if (!(iv instanceof Group)) {
                    updateTileSwitch(tile);

                } 
            }    
        }
        else if (o instanceof Minesweeper) {
            System.out.println("Game updating GridController");
        }
        
    }
    
    /**
     * Update the tile to corresponding image depending on TileType
     * @param tile 
     */
    private void updateTileSwitch(Tile tile) {
        ImageView img = (ImageView) this.getChildren().get(game.getBoardTiles().indexOf(tile));
        TileType type = tile.getType();
        if (tile.isFlagged()) {
            img.setImage(new Image("flag4.png", buttonWidth, buttonWidth, false, true));
            return;
        }
        else {
            img.setImage(new Image("water.png", buttonWidth, buttonWidth, false, true));
        }
        
        synchronized(game.board){
        switch (type) {
            case BOMB:
                if (!tile.isFlagged() && !tile.isCovered()) img.setImage(new Image("mine3.png", buttonWidth, buttonWidth, false, true));
                break;
            default:
                //the update is fired by a change in Tile.isCovered()
                if (!tile.isCovered() && tile.getType() != TileType.BOMB) {
                    img.setImage(new Image("uncovered.png", buttonWidth, buttonWidth, false, true));
                    int bombCount = game.board.bombCount(tile);
                    if (bombCount != 0) 
                        img.setImage(new Image(bombCount + ".png", buttonWidth, buttonWidth, false, true));
                }
        }
        if (!stopExplosion && type == TileType.BOMB) {
            //MouseEvent.fireEvent(img, new MouseEvent(MouseEvent.MOUSE_CLICKED, 0, 0, 0, 0, MouseButton.PRIMARY, 1, true, true, true, true, true, true, true, true, true, true, null));
        }

        }
    }

}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package minesweeper.Controller;


import javafx.application.Platform;
import javafx.event.Event;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import minesweeper.View.MainMenuView;
import minesweeper.View.RulesView;

/**
 * The Main Menu controller
 * @author Viggo
 */
public class MainMenuController {
    private final MainMenuView view;
    private Stage stage, primaryStage;
    /**
     * Creates a new Main menu controller
     * @param view The view to handle
     * @param stage The view's stage to handle
     */
    public MainMenuController(MainMenuView view, Stage stage)
    {
        this.view = view;
        this.stage = stage;
        view.update(stage);
        view.resumeButton.setOnMouseClicked((Event event) -> {
            MouseEvent in;
            if (event instanceof MouseEvent) {
                in = (MouseEvent)event;
                if (in.getButton() == MouseButton.PRIMARY) playButtonSelected();
            }
        });
        view.resumeButton.setOnKeyPressed((Event event) -> {
            KeyEvent key;
            if (event instanceof KeyEvent){
                key = (KeyEvent) event;
                if (key.getCode().equals(KeyCode.ENTER))
                    playButtonSelected();
            }
        });
       
        view.rulesButton.setOnMouseClicked((Event event) -> {
            MouseEvent mouse;
            if (event instanceof MouseEvent){
                mouse = (MouseEvent) event;
                if(mouse.getButton() == MouseButton.PRIMARY)
                    rulesButtonClicked();
            }
        });
    }
    
    /**
     * User clicked the play button
     */
    public void playButtonSelected(){
        NewGame newGame = new NewGame(stage,view.getDifficulty()); 
    }
    /**
     * User clicked the rules button
     */
    public void rulesButtonClicked()
    {
        Platform.runLater(new RulesView());
    }
}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * Minesweeper license
 * 
 * Copyright © 2016 Johan Lipecki & Viggo Lundén
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
package minesweeper.Controller;

import javafx.scene.Node;
import javafx.stage.Stage;
import minesweeper.Model.Difficulty;
import minesweeper.Model.Minesweeper;
import minesweeper.Model.Tile;
import minesweeper.View.ClockView;
import minesweeper.View.GameView;

/**
 * Used for creating a new game
 * @author Johan Lipecki <lipecki@kth.se>
 */
public class NewGame {

    private final Stage primaryStage;
    private final Minesweeper game;
    private ClockView clock;
    
    /**
     * Create a new game
     * @param oldstage the old stage to close
     * @param diff the difficulty of the new game
     */
    public NewGame(Stage oldstage, Difficulty diff){
        oldstage.close();
        
        primaryStage = new Stage();
        
        // The observable-observer initialization
        game = new Minesweeper(diff);
        clock = new ClockView(game);
        
        //The GUI is initialized
        GameView viewer = new GameView(game, clock);
        viewer.gameStage = primaryStage;
        
        //Observers are added
        game.getTimer().addObserver(viewer);
        game.board.addObserver(viewer);
        game.addObserver(viewer);
        //for(Tile t: game.board.getTiles()) t.addObserver(viewer);
        
        primaryStage.setTitle("Minesweeper");
        primaryStage.setScene(viewer.scene);
        primaryStage.setResizable(false);

        primaryStage.show();
        primaryStage.centerOnScreen();
    }
    
    /**
     * Create a new game without closing the old stage
     * @param diff the difficulty of the new game
     */
    public NewGame(Difficulty diff){
        this(new Stage(),diff);
    }
    /**
     * Creates and loads an old game from a file
     * @param oldstage the old stage to close
     * @param diff the difficulty of the new game
     * @param filename the filename of the save file to load
     */
    public NewGame(Stage oldstage, Difficulty diff, String filename)
    {
        oldstage.close();
        
        primaryStage = new Stage();
        
        // The observable-observer initialization
        game = new Minesweeper(diff, filename);
        clock = new ClockView(game);
        
        //The GUI is initialized
        GameView viewer = new GameView(game, clock);
        viewer.gameStage = primaryStage;
        
        //Observers are added
        game.getTimer().addObserver(viewer);
        game.board.addObserver(viewer);
        game.addObserver(viewer);
        //for(Tile t: game.board.getTiles()) t.addObserver(viewer);
        
        primaryStage.setTitle("Minesweeper");
        primaryStage.setScene(viewer.scene);
        primaryStage.setResizable(false);

        primaryStage.show();
        primaryStage.centerOnScreen();
        
    }
    /**
     * Hides the game
     */
    public void hideStage(){
        primaryStage.hide();
    }
    /**
     * Shows the game
     */
    public void showStage(){
        primaryStage.show();
    }
    /**
     * 
     * @return the inner game object
     */
    public Minesweeper getGame(){
        return game;
    }
    
}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * [Project] license
 * 
 * Copyright © 2016 Johan Lipecki
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
package minesweeper.Controller;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.MenuItem;
import minesweeper.Model.Difficulty;
import minesweeper.Model.Minesweeper;
import minesweeper.View.GameView;

/**
 * The controller for the settings menu
 * @author Johan Lipecki <lipecki@kth.se>
 */
public final class SettingsMenuEventHandler implements EventHandler<ActionEvent> {
    
    private final GameView settingsHandler;
    private final Minesweeper game;
    
    /**
     * Create a new settings menu event handler
     * @param game the game to handle
     * @param settingsHandler the game view to handle
     */
    public SettingsMenuEventHandler(Minesweeper game,final GameView settingsHandler) {
        this.settingsHandler = settingsHandler;
        this.game = game;
        handle(new ActionEvent());
    }

    @Override
    public void handle(ActionEvent event) {
        Object o = event.getSource();
        if (o instanceof MenuItem) {
            MenuItem m = (MenuItem) o;
            game.setDifficulty(Difficulty.valueOf(m.getText()));
        }
    }
    
}

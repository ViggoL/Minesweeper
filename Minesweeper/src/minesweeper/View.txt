/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * [Project] license
 * 
 * Copyright © 2016 Johan Lipecki & Viggo Lundén
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
package minesweeper.View;

import java.util.Observable;
import java.util.Observer;
import java.util.Timer;
import java.util.TimerTask;
import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;
import minesweeper.Model.Minesweeper;

/**
 * 
 * @author Johan Lipecki <lipecki@kth.se>
 * @author Johan Lipecki <vlunden@kth.se>
 */
public class ClockView implements Observer {

    Minesweeper game;
    private Stage stage;
    private TimeLabel timeLabel;
    private final Scene scene;
    private int seconds;
    private static ClockView theClock;
    private HBox timeBox;
    private double xSize, ySize;
    private double screenPosition;
    private int howManyTimes;
    private Pane clock;

    public ClockView(Minesweeper game) {
        this.game = game;

        clock = new Pane();
        timeBox = new HBox();

        timeBox.setPadding(new Insets(10));

        setBoxSize(200.0);

        timeBox.setMinSize(xSize, ySize);
        timeBox.setAlignment(Pos.CENTER);

        timeLabel = new TimeLabel();
        seconds = game.getTime();
        timeLabel.setText("Time: " + seconds + " seconds");

        timeBox.getChildren().add(timeLabel);
        clock.getChildren().add(timeBox);
        scene = new Scene(clock);

        screenPosition = 2.0;
        howManyTimes = 1;

        addSceneToStage(scene);
        update();

        //Platform thread must control timer (http://stackoverflow.com/a/18654916)
        Timer timer = new java.util.Timer();
        timer.schedule(new TimerTask() {
            public void run() {
                Platform.runLater(new Runnable() {
                    public void run() {
                        timeLabel.update(game.getTimer(), game.getTime());
                    }
                });
            }
        }, 1000, 1000);
    }

    private void update() {
        update(game, game.getTime());
    }

    @Override
    public void update(Observable o, Object arg) throws NullPointerException {
        if (o instanceof Minesweeper) {
            Minesweeper game = (Minesweeper) o;

            seconds = (int) arg;
            timeLabel.setText("Time: " + seconds + " seconds");
            if(game.isGameOver()) stage.close();
        }
    }

    public void showClock() {
        if (theClock != null) {
            if (theClock.stage.isShowing()) {
                theClock.grow();
            }
        } else {
            theClock = new ClockView(game);
        }
        theClock.stage.show();
    }

    private void grow() {
        howManyTimes++;
        if (getBoxSize()[0] >= scene.getRoot().minWidth(ySize)) {
            setBoxSize(xSize * 1.1);
        }
        timeBox.setMinSize(xSize, ySize);
        clock = new Pane();
        clock.getChildren().add(timeBox);
        stage.close();
        addSceneToStage(new Scene(clock));
    }

    private void setBoxSize(double x) {
        xSize = x;
        ySize = xSize / 2;
    }

    //returns x and y values for Label HBox
    public Double[] getBoxSize() {

        return new Double[]{xSize, ySize};
    }

    private void positionStage() {
        screenPosition += screenPosition * 2;
        stage.setX(screenPosition);
        stage.setY((screenPosition) / 1.5);

    }

    private void addSceneToStage(Scene scene) {
        stage = new Stage();
        stage.setTitle("Minesweeper Time");
        stage.setScene(scene);
        positionStage();
    }

}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template fileMenu, choose Tools | Templates
 * [Project] license
 * 
 * Copyright © 2016 Johan Lipecki
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
package minesweeper.View;

import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.event.EventType;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.DialogEvent;
import javafx.scene.control.Label;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;
import minesweeper.Controller.GameControllers;
import minesweeper.Controller.GridController;
import minesweeper.Controller.MainMenuController;
import minesweeper.Controller.NewGame;
import minesweeper.Controller.SettingsMenuEventHandler;
import minesweeper.Model.Board;
import minesweeper.Model.Difficulty;
import minesweeper.Model.FileHelper;
import minesweeper.Model.GameTimer;
import minesweeper.Model.Minesweeper;
import minesweeper.Model.Tile;

/**
 *
 * @author Johan Lipecki <lipecki@kth.se>, Viggo Lundén <vlunden@kth.se>
 */
public class GameView extends GameViewSuper implements Observer {

    public Stage gameStage;
    public Button pauseButton, rulesButton, resumeButton;
    public BorderPane gameFrame;
    public GridPane grid;
    public Label timeLabel;
    public final Menu fileMenu, helpMenu;    // from javadoc example: https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/MenuBar.html
    private GameControllers controller;
    private final MenuItem menuItemQuit, menuItemNewGame, exitMenuItem;
    private final ClockView clock;
    private Minesweeper game;
    private final MenuItem menuItemSaveGame;
    private final MenuItem menuItemLoadGame;

    public GameView(Minesweeper game, ClockView clock) {
        super(game);
        this.game = game;
        this.clock = clock;
        gameFrame = new BorderPane();

        buttonPaneWidth = 20.0;
        buttonWidth = 20;

        controller = new GameControllers(game, this);
        grid = new GridController(game);

        fileMenu = new Menu("File");
        helpMenu = new Menu("Help");
        exitMenuItem = new MenuItem("Exit");
        menuItemQuit = new MenuItem("Quit");
        menuItemNewGame = new MenuItem("New Game");
        menuItemSaveGame = new MenuItem("Save Game");
        menuItemLoadGame = new MenuItem("Load Game");

        menuItemSaveGame.setOnAction((ActionEvent event) -> {
            game.board.saveTiles();
            Alert alert = new Alert(Alert.AlertType.INFORMATION, "Saved game.", ButtonType.OK);
            alert.show();
        });
        
        menuItemLoadGame.setOnAction((ActionEvent event) -> {
            new NewGame(gameStage, game.getDifficultySetting(), "save.ser");
            Alert alert = new Alert(Alert.AlertType.INFORMATION, "Loaded game.", ButtonType.OK);
            alert.show();
        });
        
        exitMenuItem.setOnAction((ActionEvent t) -> {
            gameFrame.getChildren().clear();
            gameFrame.setPrefSize(0.0, 0.0);
        });
        menuItemQuit.setOnAction((ActionEvent t) -> {
            System.exit(0);
        });
        menuItemNewGame.setOnAction((ActionEvent t) -> {
            new NewGame(gameStage, game.getDifficultySetting());
        });

        for (Difficulty d : Difficulty.values()) {
            MenuItem item = new MenuItem(d.toString());
            item.setOnAction(new SettingsMenuEventHandler(game, this));
            settingsMenu.getItems().add(item);
        }

        fileMenu.getItems().addAll(menuItemSaveGame, menuItemLoadGame, menuItemNewGame, exitMenuItem, menuItemQuit);

        menuBar.getMenus().add(settingsMenu);
        menuBar.getMenus().add(fileMenu);

        gameFrame.setLeft(controller);
        gameFrame.setTop(menuBar);
        gameFrame.setCenter(grid);

        scene = new Scene(gameFrame);
    }

    @Override
    public void update(Observable o, Object arg) {
        if (o instanceof GameTimer) {
            GameTimer time = (GameTimer) o;
            if (time.getSeconds() > 0) {
                if (time.isTicking()) {
                    grid.setVisible(true);
                } else if (!time.isTicking() && !game.isGameOver()) {
                    grid.setVisible(false);
                    gameFrame.setCenter(new TimeLabel("Time: " + time.getSeconds() + " seconds"));
                } else if (game.isGameOver()) grid.setVisible(true);
            } else if (time.getSeconds() == 0 && !time.isTicking()) {
                Alert theTimeIsNow = new Alert(Alert.AlertType.INFORMATION, "Click a tile to start playing!", ButtonType.OK);
                DialogEvent event = new DialogEvent(theTimeIsNow, DialogEvent.DIALOG_CLOSE_REQUEST);

                theTimeIsNow.onCloseRequestProperty().set(new TheTimerIsNotRunning_AlertEventHandler(event));
                theTimeIsNow.show();
            }
        } else if (o instanceof Minesweeper) {
            Minesweeper game = (Minesweeper) o;
            System.out.println("game update");
            synchronized (game.board) {
                if (game.getTime() > 0 && !game.isGameOver()) {
                    if (game.isPaused()) {
                        grid.setVisible(true);
                        gameFrame.setCenter(grid);
                    } else if (!game.isPaused()) {
                        grid.setVisible(false);
                        gameFrame.setCenter(new TimeLabel("Time: " + game.getTime() + " seconds"));
                    } 
                }
                else if (game.isGameOver()) {
                        for (Tile t : game.getBoardTiles()) {
                            game.board.uncover(t);
                        }

                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(GameView.class.getName()).log(Level.SEVERE, null, ex);
                            Thread.currentThread().interrupt();
                        }
                        tellTheUserItsOver();
                    }
            }if (game.getTime() == 0 && !game.isPaused()) {
                Alert theTimeIsNow = new Alert(Alert.AlertType.INFORMATION, "Click a tile to start playing!", ButtonType.OK);
                DialogEvent event = new DialogEvent(theTimeIsNow, DialogEvent.DIALOG_CLOSE_REQUEST);

                theTimeIsNow.onCloseRequestProperty().set(new TheTimerIsNotRunning_AlertEventHandler(event));
                theTimeIsNow.show();
            }

        }

    }

    public void tellTheUserItsOver() {
        Alert gameOver;
        gameOver = new Alert(AlertType.INFORMATION);
        gameOver.setTitle("Game Over");
        gameOver.setContentText("It's all over mate!\n\n"
                + "Please select New Game.");
        gameOver.showAndWait();

    }

    public ClockView getClockView() {
        return this.clock;
    }

    public final class TheTimerIsNotRunning_AlertEventHandler implements EventHandler<DialogEvent> {

        public TheTimerIsNotRunning_AlertEventHandler(DialogEvent event) {
            handle((DialogEvent) event);
        }

        @Override
        public void handle(DialogEvent event) {
            controller.ResumeButtonClicked(event);
        }
    }

}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * Minesweeper license
 * 
 * Copyright © 2016 Johan Lipecki & Viggo Lundén
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
package minesweeper.View;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Menu;
import javafx.scene.control.MenuBar;
import javafx.scene.control.MenuItem;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import minesweeper.Model.Difficulty;
import minesweeper.Model.Minesweeper;

/**
 *
 * @author Johan Lipecki <lipecki@kth.se>
 */
public abstract class GameViewSuper {
    
    public Minesweeper game;
    public VBox buttonPane;
    public Scene scene;
    protected double buttonSpacing;
    protected double buttonWidth;
    protected double buttonPaneWidth;
    protected final Menu settingsMenu;
    protected final MenuBar menuBar;
    protected Difficulty difficulty;

    public GameViewSuper(Minesweeper game) {
        this.game = game; 
        difficulty = game.getDifficultySetting();
        buttonPane = new VBox();
        buttonSpacing = 10.0;
        buttonWidth = Double.MAX_VALUE;
        
        buttonPane.setSpacing(buttonSpacing);
        buttonPane.setAlignment(Pos.TOP_CENTER);
        
        settingsMenu = new Menu(" Settings");                  
        
        menuBar = new MenuBar();

    }
}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package minesweeper.View;

import java.util.Arrays;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.geometry.Insets;
import javafx.scene.control.Alert;
import javafx.scene.control.MenuItem;
import javafx.scene.text.Font;
import minesweeper.Model.Difficulty;
import minesweeper.Model.Minesweeper;


/**
 *
 * @author Viggo
 */
public class MainMenuView extends GameViewSuper {
    public VBox root;
    public final Button resumeButton;
    public final Button settingsButton;
    public final Button rulesButton;
    private Label title;
    public MainMenuView()
    {
        super(new Minesweeper());
        game = null;
        resumeButton = new Button();
        settingsButton = new Button();
        rulesButton = new Button();
        this.buttonPaneWidth = 90.0;
        
        for(Difficulty d: Difficulty.values()){
            MenuItem item = new MenuItem(d.toString());
            item.setOnAction(new settingsMenuActionEvent());
            settingsMenu.getItems().add(item);                 
        }
        
        menuBar.getMenus().add(settingsMenu);
        
        
    }
    
    public void update(Stage primaryStage)
    {
        
        title = new Label("Minesweeper");
        title.setFont(new Font("Helvetica", 30));
        title.setPadding(new Insets(5,5,20,5));
        
        resumeButton.setAlignment(Pos.CENTER);
        settingsButton.setAlignment(Pos.CENTER);
        rulesButton.setAlignment(Pos.CENTER);
        
        resumeButton.setText("Play");
        settingsButton.setText("Settings");
        rulesButton.setText("Rules");
        
        resumeButton.setMaxWidth(buttonWidth);
        settingsButton.setMaxWidth(buttonWidth);
        rulesButton.setMaxWidth(buttonWidth);

        
        buttonPane.setMaxWidth(buttonPaneWidth);
        buttonPane.getChildren().addAll(resumeButton,rulesButton,menuBar); 
        
        root = new VBox();
        root.setAlignment(Pos.TOP_CENTER);
        root.getChildren().addAll(title, buttonPane);
        
        scene = new Scene(root, 200, 200);
        primaryStage.setTitle("Minesweeper");
        primaryStage.setScene(scene);
        primaryStage.setResizable(false);
        primaryStage.show();
    }
    
    private void setDifficulty(Difficulty valueOf) {
        difficulty = valueOf;
    }
    
    public Difficulty getDifficulty(){
        return this.difficulty;
    }
    
    private final class settingsMenuActionEvent implements EventHandler<ActionEvent> {
        
        private settingsMenuActionEvent(){
            handle(new ActionEvent());
        }
        
        @Override
        public void handle(ActionEvent event) {
            Object o = event.getSource();
            if(o instanceof MenuItem){
                MenuItem m = (MenuItem) o;
                setDifficulty(Difficulty.valueOf(m.getText()));    
            }
        };
    }

}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * [Project] license
 * 
 * Copyright © 2016 Johan Lipecki
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
package minesweeper.View;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;

/**
 *
 * @author Johan Lipecki <lipecki@kth.se>
 */
public class RulesView implements Runnable {

    private static Label title; 
    private static Text body;
    private static VBox root;
    private static Scene scene;

    public static void showRules() {
        Stage stage = new Stage();
        
        title = new Label("Minesweeper Rules");
        title.setFont(new Font("Helvetica", 30));
        title.setPadding(new Insets(10));
        
        body = new Text("The goal of the game is to uncover all the squares "
                + "without clicking on a mine and being \"blown up\". \n"
                + "\tThe locations of the mines are discovered by a process of logic: "
                + "clicking on a square on the game board "
                + "will reveal what is hidden underneath. "
                + "Some squares are blank but some contain numbers (1 to 8), "
                + "each number being the number of mines adjacent to the uncovered square. "
                + "\n"
                + "\tTo help avoid hitting a mine, "
                + "the location of a suspected mine can be marked "
                + "by flagging it with the right mouse button. "
                + "The game is won once all blank squares have been uncovered "
                + "without hitting a mine. "
                + "Any remaining mines not identified by flags are automatically flagged by the computer.\n\n"
                + "The game board comes in three set sizes: EASY, MEDIUM, and HARD");
        
        body.maxHeight(Double.MAX_VALUE);
        body.setWrappingWidth(250);
        
        root = new VBox();
        root.setAlignment(Pos.TOP_CENTER);
        root.getChildren().addAll(title,body);
        root.setPadding(new Insets(10));
        
        scene = new Scene(root);
        
        stage.setTitle("Minesweeper");
        stage.setScene(scene);
        stage.setResizable(false);
        stage.setX(300);
        stage.setY(150);
        stage.show();
    }

    @Override
    public void run() {
        showRules();
    }

}
package minesweeper.View;

import java.util.Observable;
import java.util.Observer;

import javafx.scene.control.Label;
import javafx.scene.text.Font;
import minesweeper.Model.GameTimer;
import minesweeper.Model.Minesweeper;

/**
 * An observer, implementing the java.util.Observer interface and the method
 * update. The method update is called whenever the subject (observable), in
 * this case the Minesweeper model or GameTimer, calls Observable.setChanged followed by
 * Observable.notifyObservers.
 *
 * @author anderslm@kth.se, modified for Minesweeper by 
 * @author lipecki@kth.se
 */
public class TimeLabel extends Label implements Observer{

    public TimeLabel() {
        super("- - -");
        this.setFont(Font.font("Helvetica", 20));
    }

    public TimeLabel(String string) {
        this();
        this.setText(string);
    }

    @Override
    public void update(Observable o, Object arg) {
        if(o instanceof Minesweeper){
            Minesweeper model = (Minesweeper) o;
            this.setText("Time:" + model.getTime() + " s");
        }
        else if (o instanceof GameTimer){
            int i = ((Integer) arg).intValue();
            this.setText("Time: " + i + " seconds");
        }
            
    }
}
